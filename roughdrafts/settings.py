"""
Django settings for roughdrafts project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
env = os.getenv("ENV", "DEBUG")

match env:
    case "PROD":
        DEBUG = False
        SECURE_SSL_REDIRECT = True
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True
        props = {
            "SECRET_KEY": os.getenv("SECRET_KEY"),
            "DISCORD_SECRET": os.getenv("DISCORD_SECRET"),
            "DISCORD_CLIENT_ID": os.getenv("DISCORD_CLIENT_ID"),
            "HOSTNAME": os.getenv("HOSTNAME"),
            # "DB_NAME": os.getenv("DB_NAME"),
            # "DB_USER": os.getenv("DB_USER"),
            # "DB_PASS": os.getenv("DB_PASS"),
            # "DB_HOST": os.getenv("DB_HOST"),
            # "DB_PORT": os.getenv("DB_PORT"),
        }
        missing = [k for k, v in props.items() if v is None]
        if len(missing) > 0:
            raise ValueError('Missing props:\n'+'\n'.join(missing))
        SECRET_KEY = props['SECRET_KEY']
        SOCIALACCOUNT_PROVIDERS = {
            'discord': {
                'APP': {
                    'client_id': props['DISCORD_CLIENT_ID'],
                    'secret': props['DISCORD_SECRET'],
                },
            }
        }

        ALLOWED_HOSTS = [
            props['HOSTNAME']
        ]
        # Database
        # https://docs.djangoproject.com/en/4.2/ref/settings/#databases

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        """
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": props['DB_NAME'],
                "USER": props['DB_USER'],
                "PASSWORD": props['DB_PASS'],
                "HOST": props['DB_HOST'],
                "PORT": props['DB_PORT'],
            }
        }
        """

    case "DEBUG":
        DEBUG = True
        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = 'django-insecure-b1no_9(10%*=rano*xxtc-)v1#_$k1zp%bg@5h5%+%7zu8_6w3'
        ALLOWED_HOSTS = []
        # Database
        # https://docs.djangoproject.com/en/4.2/ref/settings/#databases

        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }

        SOCIALACCOUNT_PROVIDERS = {
            'discord': {
                'APP': {
                    'client_id': "xxx",
                    'secret': "xxx",
                },
            }
        }


LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/home/'


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Application definition

INSTALLED_APPS = [
    'pastes.apps.PastesConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.discord',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'roughdrafts.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['roughdrafts/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'roughdrafts.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = ['roughdrafts/static']

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
HOSTNAME=os.environ.get('HOSTNAME', 'localhost')
DEFAULT_FROM_EMAIL=f"noreply@{HOSTNAME}"
SERVER_EMAIL=f"admin@{HOSTNAME}"
